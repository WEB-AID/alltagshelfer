import { useMutation } from "@tanstack/react-query";
import { axiosInstance } from "@/shared/api/axios";

// –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
interface UserResponse {
  id: string;
  email: string;
  updatedAt: string;
  roles: ["USER" | "ADMIN"];
}

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞
type FindUserData = string; // ID –∏–ª–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

export const useFindUser = () => {
  return useMutation<UserResponse, Error, FindUserData>({
    mutationFn: async (idOrEmail: FindUserData): Promise<UserResponse> => {
      const response = await axiosInstance.get<UserResponse>(
        `/user/${idOrEmail}`
      );

      // ‚úÖ –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ localStorage
      const newAccessToken = response.headers["x-new-access-token"];
      if (newAccessToken) {
        localStorage.setItem("access_token", newAccessToken);
        console.log("üîÑ –ù–æ–≤—ã–π accessToken —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", newAccessToken);
      }

      return response.data;
    },
    onSuccess: (data) => {
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", data);
    },
  });
};
